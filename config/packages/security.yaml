security:
    enable_authenticator_manager: true

    password_hashers:
        Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface: 'auto'

    # https://symfony.com/doc/current/security.html#registering-the-user-hashing-passwords
    providers:
        app_user_provider:
            entity:
                class: App\Entity\User
                property: username
    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false
        main:
            # allow authentication using a form or HTTP basic
            form_login:
                # "login" is the name of the route created previously
                login_path: login
                check_path: login
                enable_csrf: true
                default_target_path: home_page
                always_use_default_target_path: true
            http_basic: 
                realm: Secured Area

            # configure the form authentication as the entry point for unauthenticated users
            entry_point: form_login
            # TODO: check new security system for providers
            provider: app_user_provider
            # guard:
            #     authenticators:
            #         - App\Security\LoginFormAuthenticator
            logout:
                path: app_logout
                # where to redirect after logout
                # target: app_any_route
            switch_user: true
            # anonymous: true
            lazy: true
              #provider: users_in_memory

            # activate different ways to authenticate
            # https://symfony.com/doc/current/security.html#the-firewall

            # https://symfony.com/doc/current/security/impersonating_user.html

    # Give ROLE_SUPER_ADMIN same rights as ROLE_ADMIN
    role_hierarchy:
        ROLE_SUPER_ADMIN: ROLE_ADMIN

    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:
        - { path: ^/user, roles: [ROLE_ADMIN] }
        - { path: ^/teacher, roles: [ROLE_TEACHER, ROLE_ADMIN] }
        - { path: ^/student, roles: [ROLE_STUDENT, ROLE_ADMIN] }

when@test:
    security:
        password_hashers:
            # By default, password hashers are resource intensive and take time. This is
            # important to generate secure password hashes. In tests however, secure hashes
            # are not important, waste resources and increase test times. The following
            # reduces the work factor to the lowest possible values.
            Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
                algorithm: auto
                cost: 4 # Lowest possible value for bcrypt
                time_cost: 3 # Lowest possible value for argon
                memory_cost: 10 # Lowest possible value for argon
